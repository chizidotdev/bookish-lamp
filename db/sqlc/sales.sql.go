// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: sales.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (
    item_id, quantity_sold, sale_price, customer_name, sale_date 
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, item_id, quantity_sold, sale_price, sale_date, customer_name, created_at, updated_at
`

type CreateSaleParams struct {
	ItemID       uuid.UUID `json:"item_id"`
	QuantitySold int64     `json:"quantity_sold"`
	SalePrice    float32   `json:"sale_price"`
	CustomerName string    `json:"customer_name"`
	SaleDate     time.Time `json:"sale_date"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.ItemID,
		arg.QuantitySold,
		arg.SalePrice,
		arg.CustomerName,
		arg.SaleDate,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.QuantitySold,
		&i.SalePrice,
		&i.SaleDate,
		&i.CustomerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sales WHERE (id = $1 AND item_id = $2)
`

type DeleteSaleParams struct {
	ID     uuid.UUID `json:"id"`
	ItemID uuid.UUID `json:"item_id"`
}

func (q *Queries) DeleteSale(ctx context.Context, arg DeleteSaleParams) error {
	_, err := q.db.ExecContext(ctx, deleteSale, arg.ID, arg.ItemID)
	return err
}

const getSale = `-- name: GetSale :one
SELECT id, item_id, quantity_sold, sale_price, sale_date, customer_name, created_at, updated_at FROM sales
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSale(ctx context.Context, id uuid.UUID) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSale, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.QuantitySold,
		&i.SalePrice,
		&i.SaleDate,
		&i.CustomerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSaleForUpdate = `-- name: GetSaleForUpdate :one
SELECT id, item_id, quantity_sold, sale_price, sale_date, customer_name, created_at, updated_at FROM sales
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetSaleForUpdate(ctx context.Context, id uuid.UUID) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSaleForUpdate, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.QuantitySold,
		&i.SalePrice,
		&i.SaleDate,
		&i.CustomerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSales = `-- name: ListSales :many
SELECT id, item_id, quantity_sold, sale_price, sale_date, customer_name, created_at, updated_at FROM sales
WHERE item_id = $1
ORDER BY sale_date DESC
`

func (q *Queries) ListSales(ctx context.Context, itemID uuid.UUID) ([]Sale, error) {
	rows, err := q.db.QueryContext(ctx, listSales, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sale{}
	for rows.Next() {
		var i Sale
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.QuantitySold,
			&i.SalePrice,
			&i.SaleDate,
			&i.CustomerName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSale = `-- name: UpdateSale :one
UPDATE sales 
SET quantity_sold = $2,
sale_price = $3,
customer_name = $4,
sale_date = $5
WHERE (id = $1 AND item_id = $6)
RETURNING id, item_id, quantity_sold, sale_price, sale_date, customer_name, created_at, updated_at
`

type UpdateSaleParams struct {
	ID           uuid.UUID `json:"id"`
	QuantitySold int64     `json:"quantity_sold"`
	SalePrice    float32   `json:"sale_price"`
	CustomerName string    `json:"customer_name"`
	SaleDate     time.Time `json:"sale_date"`
	ItemID       uuid.UUID `json:"item_id"`
}

func (q *Queries) UpdateSale(ctx context.Context, arg UpdateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, updateSale,
		arg.ID,
		arg.QuantitySold,
		arg.SalePrice,
		arg.CustomerName,
		arg.SaleDate,
		arg.ItemID,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.QuantitySold,
		&i.SalePrice,
		&i.SaleDate,
		&i.CustomerName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
